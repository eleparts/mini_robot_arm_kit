보조기능(평행이동)의 동작이 정상적이지 않을경우 현재 코드를 확인 후 다른 코드로 교체 
혹은 1.22 코드와 1.22-1 코드를 참고

방향 A

/* 평행이동 제어함수 */
void moveAngle(int moveAngleValue, int direction)
{
  int i;

  for(i=0; i< moveAngleValue; i++){
    if(direction == FRONT)
    {  
      angleArmTop++;              // 전진
      angleArmBot--;
    }else{
      angleArmTop--;              // 후진
      angleArmBot++;
    }
    ArmTop.write(angleArmTop);
    ArmBot.write(angleArmBot);
    
    if(delay_SwCheck(8)){         // 지연
      break;
    }
  }
}



/* 평행이동 범위(각도) 계산 함수 */
int MoveRange(int rtol)
{
  int TopAngle, botAngle, moveAngle;
 
  if(rtol)
  {
    TopAngle = abs(MIN_ANGLE - angleArmTop);                   // abs : 절대값 함수 (음수 제거)
    botAngle = abs(MAX_ANGLE - angleArmBot);

  }else{
    TopAngle = abs(MAX_ANGLE - angleArmTop);
    botAngle = abs(MIN_ANGLE - angleArmBot); 
  }

  moveAngle = (TopAngle > botAngle) ? botAngle : TopAngle ;    // 3항 연산자 - 두 모터의 이동가능한 각도중에서 적은쪽을 반환

  return moveAngle;
}





방향 B


/* 평행이동 제어함수 */
void moveAngle(int moveAngleValue, int direction)
{
  int i;

  for(i=0; i< moveAngleValue; i++){
    if(direction == FRONT)
    {  
      angleArmTop--;              // 전진
      angleArmBot--;
    }else{
      angleArmTop++;              // 후진
      angleArmBot++;
    }
    ArmTop.write(angleArmTop);
    ArmBot.write(angleArmBot);
    
    if(delay_SwCheck(8)){         // 지연
      break;
    }
  }
}




/* 평행이동 범위(각도) 계산 함수 */
int MoveRange(int rtol)
{
  int TopAngle, botAngle, moveAngle;
 
  if(rtol)
  {
    TopAngle = abs(MAX_ANGLE - angleArmTop);                   // abs : 절대값 함수 (음수 제거)
    botAngle = abs(MAX_ANGLE - angleArmBot);

  }else{
    TopAngle = abs(MIN_ANGLE - angleArmTop);
    botAngle = abs(MIN_ANGLE - angleArmBot); 
  }

  moveAngle = (TopAngle > botAngle) ? botAngle : TopAngle ;    // 3항 연산자 - 두 모터의 이동가능한 각도중에서 적은쪽을 반환

  return moveAngle;
}